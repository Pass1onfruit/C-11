对于内存泄漏的事先预防

RTTI运行时类型识别
RAII管理资源，获取资源立即初始化
像指针一样使用



拷贝构造时
普通指针被拷贝后，一个就是指向同一资源的
所以智能指针就应该是浅拷贝的


C++98中  auto_ptr

// 一旦发生拷贝，就将ap中资源转移到当前对象中，然后另ap与其所管理资源断开联系，
// 这样就解决了一块空间被多个对象使用而造成程序奔溃问题
AutoPtr(AutoPtr<T>& ap)
	: _ptr(ap._ptr)
{
	ap._ptr = NULL;
}
//等于移交管理权
//悬空，访问会崩溃

C++11中  unique_ptr

//简单粗暴，直接不允许拷贝，也不准赋值
// unique_ptr的防拷贝方式：delete
UniquePtr(UniquePtr<T> const&) = delete;
UniquePtr& operator=(UniquePtr<T> const&) = delete;

C++11中  shared_ptr

//解决方法：引用计数（维护在堆上，不能使用static变量）
//记录有多少个对象管理这块资源，智能指针析构时，检查计数
//如果为 1 则表示直接是最后一个管理的对象，释放

线程安全问题

1. 智能指针对象中引用计数是多个智能指针对象共享的，两个线程中智能指针的引用计数同时++或--，这 个操作不是原子的，引用计数原来是1，++了两次，可能还是2，这样引用计数就错乱了，会导致资源未释放或者程序崩溃的问题
2. 智能指针管理的对象存放在堆上，两个线程中同时去访问，会导致线程安全问题
所以只能指针中引用计数++、--是需要加锁的，也就是说引用计数的操作是线程安全的

循环引用

1. node1和node2两个智能指针对象指向两个节点，引用计数变成1，我们不需要手动delete
2. node1的_next指向node2，node2的_prev指向node1，引用计数变成2
3. node1和node2析构，引用计数减到1，但是_next还指向下一个节点。但是_prev还指向上一个节点
4. _next析构了，node2就释放了；_prev析构了，node1就释放了
5.但是_next属于node的成员，node1释放了，_next才会析构，而node1由_prev管理，_prev属于node2 成员，所以这就叫循环引用，谁也不会释放

用仿函数实现 定制删除器 
 template<class T>
struct  DeleteArray
{
	void operator()(T* ptr)
	{
		delete[] ptr;
	}
};
//会使用传的仿函数的对象堆其进行释放
//std::shared_ptr<A> sp1(new A[10]);
std::shared_ptr<A> sp1(new A[10], DeleteArray<A>());

weak_ptr：专门解决循环引用
解决方案：在引用计数的场景下，把节点中的_prev和_next改成weak_ptr就可以了
原理就是，node1->_next = node2; 和 node2->_prev = node1; 时 weak_ptr 的 _next 和 _prev 不会增加 node1 和 node2 的引用计数


锁是不支持拷贝的
lock_guard
unique_lock
区别和联系:
1、都管理锁自动释放，解决异常安全问题（比如上锁后抛异常无法解锁）的RAII类
2、 unique_lock除了RAII，还支持手动加锁解锁核一些其他接口
void Func()
{
	for (size_t i = 0; i < 1000000; ++i)
	{
		LockGuard<mutex> lock(mtx);
		++n;
	}
}

