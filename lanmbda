

lambda表达式书写格式：
[capture-list] (parameters) mutable -> return-type { statement }

[capture-list] : 
捕捉列表，该列表总是出现在lambda函数的开始位置，编译器根据[]来判断接下来 的代码是否为lambda函数，捕捉列表能够捕捉上下文中的变量供lambda函数使用
(parameters)：
参数列表。与普通函数的参数列表一致，如果不需要参数传递，则可以连同()一起 省略
mutable：
默认情况下，lambda函数总是一个const函数，mutable可以取消其常量性。使用该修 饰符时，参数列表不可省略(即使参数为空)
->return-type：
返回值类型。用追踪返回类型形式声明函数的返回值类型，没有返回值时此部分 可省略。返回值类型明确情况下，也可省略，由编译器对返回类型进行推导
{statement}：
函数体。在该函数体内，除了可以使用其参数外，还可以使用所有捕获到的变量   
注意： 在lambda函数定义中，参数列表和返回值类型都是可选部分，而捕捉列表和函数体可以为空

int main()
{
	// 最简单的lambda表达式, 该lambda表达式没有任何意义
	[] {};

	// 省略参数列表和返回值类型，返回值类型由编译器推导为int
	int a = 3, b = 4, c = 5;
	[=] {return a + 3; };
	[a, b] {return a + b; };  //代表捕捉了a和b
	[=] {return a + b; };  //捕捉外边所有对象



	// 省略了返回值类型，无返回值类型
	auto fun1 = [&](int c) {b = a + c; };
	fun1(10);
	cout << a << " " << b << endl;

	// 各部分都很完善的lambda函数
	auto fun2 = [=, &b](int c)->int {return b += a + c; };
	cout << fun2(10) << endl;

	// 复制捕捉x
	int x = 10;
	auto add_x = [x](int a) mutable { x *= 2; return a + x; };
	cout << add_x(10) << endl;
	return 0;
}
